// 09-array main.js

// 배열의 생성
// 대괄호 [] 사용
// 원소의 타입을 구분하지 않는다

// 문자열의 생성 : ""

// ""  // 빈 문자열 데이터
[]; // 비어 있는 배열 데이터

// 빈 배열 데이터를 변수 emptyArray 할당
let emptyArray = [];

// 숫자 1을 저장한 배열 데이터를 변수 oneArray 에 할당
let oneArray = [1];

// 원소를 여러 개 저장하기 위해서는
// 쉼표(,)로 원소를 구분해서 작성

// 숫자 1, 2, 3, 4, 5 를 저장한 배열 데이터를 변수 manyArray 에 할당
let manyArray = [1, 2, 3, 4, 5];

// 배열의 생성
// 빈 배열 : []
// 원소가 하나인 배열 : [1]
// 원소가 2개 이상인 배열은 쉼표로 원소 구분 : [1, 2, 3, 4, 5]

// 배열의 인덱스
// 배열 내부 원소의 위치 번호
// 0부터 시작
// 마지막: 배열 원소 수(배열의 길이) -1

// 배열 원소 접근
// 대괄호 [] 사용
// 배열데이터[위치번호]
// 변수 array2 에 [1, "2", 3] 을 저장한 배열을 할당
let array2 = [1, "2", 3];

// 첫 번째 위치(index === 0)의 원소에 접근한다
// array2[index]
array2[0];
// 두 번째 위치
array2[1];
// 세 번째 위치
array2[2];

// 첫 번째 원소를 콘솔에 출력
console.log(array2[0]); // 1 출력

// 첫 번째 원소를 -1로 재할당
// 1. 첫 번째 워소에 접근
// 2. -1을 재할당
array2[0] = -1;

// 첫 번째 원소를 콘솔에 출력
console.log(array2[0]); // -1 출력

// 원소의 추가
// 배열데이터.push(데이터)
// .push() 함수

// 변수 array3을 선언하고, 배열 데이터 [0]을 할당
let array3 = [0];
array3.push(1);
console.log(array3); // [ 0, 1 ] 출력

// 원소의 제거
// 배열데이터.pop()
// 배열의 마지막 원소를 제거
// 제거한 원소를 반환(데이터를 생성)

// 배열 array3
array3.pop();
console.log(array3); // [ 0 ] 출력

// 배열의 반복
// 배열에 저장된 원소를 반복해서 접근하는 방법
// [ 1, 2, 3 ]

// for 반복문 활용
// 배열의 인덱스가 0 ~ '배열의 길이 - 1' 이라는 범위를 가진다는 특성 활용

// 0부터 배열 길이 -1까지의 숫자를 출력하세요
// 배열의 길이: 배열데이터.length

// 변수 array4 를 선언하고, 배열 [1, 2, 3]을 할당
let array4 = [1, 2, 3];
// 배열 array4의 길이 출력
console.log(array4.length);

// for 반복문을 활용해서, 0 부터 '배열의 길이 - 1'까지 반복
for (let index = 0; index < array4.length; index++) {
  console.log(`array4 배열의 ${index}번째 인덱스: ${array4[index]}`);
}

// for...of 반복문
// 인덱스(위치번호) 활용 X
// 배열에서 직접적으로 원소를 꺼내옴
// for (원소 of 배열) {}
for (let element of array4) {
  console.log(element);
}
